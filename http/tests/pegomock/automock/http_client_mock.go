// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/mszostok/kbox/cmd/termui/internal/http (interfaces: HTTPClient)

package automock

import (
	pegomock "github.com/petergtz/pegomock"
	http "net/http"
	"reflect"
)

type MockHTTPClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockHTTPClient() *MockHTTPClient {
	return &MockHTTPClient{fail: pegomock.GlobalFailHandler}
}

func (mock *MockHTTPClient) Do(_param0 *http.Request) (*http.Response, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockHTTPClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Do", params, []reflect.Type{reflect.TypeOf((**http.Response)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *http.Response
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*http.Response)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockHTTPClient) VerifyWasCalledOnce() *VerifierHTTPClient {
	return &VerifierHTTPClient{mock, pegomock.Times(1), nil}
}

func (mock *MockHTTPClient) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierHTTPClient {
	return &VerifierHTTPClient{mock, invocationCountMatcher, nil}
}

func (mock *MockHTTPClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierHTTPClient {
	return &VerifierHTTPClient{mock, invocationCountMatcher, inOrderContext}
}

type VerifierHTTPClient struct {
	mock                   *MockHTTPClient
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierHTTPClient) Do(_param0 *http.Request) *HTTPClient_Do_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Do", params)
	return &HTTPClient_Do_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type HTTPClient_Do_OngoingVerification struct {
	mock              *MockHTTPClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *HTTPClient_Do_OngoingVerification) GetCapturedArguments() *http.Request {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *HTTPClient_Do_OngoingVerification) GetAllCapturedArguments() (_param0 []*http.Request) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*http.Request, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*http.Request)
		}
	}
	return
}
